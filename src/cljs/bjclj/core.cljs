(ns bjclj.core
  (:require
   [reagent.core :as reagent :refer [atom]]
   [reagent.dom :as rdom]
   [reagent.session :as session]
   [reitit.frontend :as reitit]
   [clerk.core :as clerk]
   [bjclj.util :as util]
   [bjclj.constants :as constants]
   [bjclj.game :as game]
   [bjclj.app-state :as state]
   [accountant.core :as accountant]))

;; -------------------------
;; Routes

(def router
  (reitit/router
   [["/" :index]
    ["/items"
     ["" :items]
     ["/:item-id" :item]]
    ["/about" :about]]))

(defn path-for [route & [params]]
  (if params
    (:path (reitit/match-by-name router route params))
    (:path (reitit/match-by-name router route))))

;; -------------------------
;; State
(def app-state
  (atom
   {:deck (shuffle constants/deck)}
   {:game? false}))

(defn update-deck! [f & args]
  (apply swap! app-state update-in [:deck] f args))


(defn hit [player]
    (update-deck! (fn [deck]
                     (util/hit player deck))))
(defn reset []
  (update-deck! #(map util/reset-card %)))

(defn remove-card! [c]
  (update-deck! (fn [cs]
                  (vec (remove #(= % c) cs)))
                c))

(defn toggle-game []
  (swap! app-state update-in [:game] util/invert))

(defn deal-initial-cards! [player]
  (dotimes [n 2] (hit player)))


  
;; getters

(defn hand-val [{:keys [deck]} player]
  (util/get-player-hand-val player deck))

(defn hand [{:keys [deck]} player]
  (util/get-player-hand player deck))

(defn action-button [state player]
  (cond
    (= 0 (hand-val state player)) [:button {:on-click #(deal-initial-cards! player)} "Deal"]
    (> (hand-val state :dealer) 10) [:button {:on-click reset} "Play Again"]
    (< (hand-val state player) 21) [:button {:on-click #(hit player)} "Hit"]
    (> (hand-val @app-state :player1) 21) [:button {:on-click reset} "Reset"]))

(defn did-player-win [state player]
  (let [p (hand-val state player)
        d (hand-val state :dealer)]
    (cond (> d p) nil 
          (> p d) true)))
          
    
(defn resolve-game [state player]
  (if (< (hand-val state :dealer) 17) (resolve-game (hit :dealer))))
  
;; -------------------------
;; Page components

(defn home-page []
  (fn []
    [:span.main
     [:header {:class []}
      [:h1 "The Blackjack Simulator"]
      [:div
       [:p "Try some things out"]]]
     [:div {:class ["flex pm"]}
      [:div
       [:ul (map game/display-card (:deck @app-state))]]
      [:div {:class ["flex pm"]}
       [:div {:class ["flex pm items-start"]}
         (action-button @app-state :player1)
         [:h2 "Your Hand"]
         [:p "Your hand value: " (hand-val @app-state :player1)]
         [:ul (map game/display-card (hand @app-state :player1))]]
       [:div {:class ["flex pm items-start"]}
        [:button {:on-click #(hit :dealer)} "Hit Dealer"]
        [:h2 "Dealer Hand"]
        [:p "Dealer hand value: " (hand-val @app-state :dealer)]
        [:ul (map game/display-card (hand @app-state :dealer))]]
       [:div
        [:button {:on-click #(resolve-game @app-state :player1)} "Resolve"]]]]]))


(defn items-page []
  (fn []
    [:span.main
     [:h1 "The items of bjclj"]
     [:ul (map (fn [item-id]
                 [:li {:name (str "item-" item-id) :key (str "item-" item-id)}
                  [:a {:href (path-for :item {:item-id item-id})} "Item: " item-id]])
               (range 1 60))]]))


(defn item-page []
  (fn []
    (let [routing-data (session/get :route)
          item (get-in routing-data [:route-params :item-id])]
      [:span.main
       [:h1 (str "Item " item " of bjclj")]
       [:p [:a {:href (path-for :items)} "Back to the list of items"]]])))


(defn about-page []
  (fn [] [:span.main
          [:h1 "About bjclj"]]))


;; -------------------------
;; Translate routes -> page components

(defn page-for [route]
  (case route
    :index #'home-page
    :about #'about-page
    :items #'items-page
    :item #'item-page))


;; -------------------------
;; Page mounting component

(defn current-page []
  (fn []
    (let [page (:current-page (session/get :route))]
      [:div
       [:header
        [:p [:a {:href (path-for :index)} "Home"] " | "
         [:a {:href (path-for :about)} "About bjclj"]]]
       [page]
       [:footer
        [:p "bjclj was generated by the "
         [:a {:href "https://github.com/reagent-project/reagent-template"} "Reagent Template"] "."]]])))

;; -------------------------
;; Initialize app

(defn mount-root []
  (rdom/render [current-page] (.getElementById js/document "app")))

(defn init! []
  (clerk/initialize!)
  (accountant/configure-navigation!
   {:nav-handler
    (fn [path]
      (let [match (reitit/match-by-path router path)
            current-page (:name (:data  match))
            route-params (:path-params match)]
        (reagent/after-render clerk/after-render!)
        (session/put! :route {:current-page (page-for current-page)
                              :route-params route-params})
        (clerk/navigate-page! path)))
        
    :path-exists?
    (fn [path]
      (boolean (reitit/match-by-path router path)))})
  (accountant/dispatch-current!)
  (mount-root))
