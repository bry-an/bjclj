(ns bjclj.core
  (:require
   [reagent.core :as reagent :refer [atom]]
   [reagent.dom :as rdom]
   [reagent.session :as session]
   [reitit.frontend :as reitit]
   [clerk.core :as clerk]
   [bjclj.util :as util]
   [bjclj.constants :as constants]
   [bjclj.game :as game]
   [bjclj.app-state :as state]
   [accountant.core :as accountant]))

;; -------------------------
;; Routes

(def router
  (reitit/router
   [["/" :index]
    ["/items"
     ["" :items]
     ["/:item-id" :item]]
    ["/about" :about]]))

(defn path-for [route & [params]]
  (if params
    (:path (reitit/match-by-name router route params))
    (:path (reitit/match-by-name router route))))

;; -------------------------
;; State
(def app-state
  (atom
   {:deck (shuffle constants/deck)}))

(defn update-deck! [f & args]
  (apply swap! app-state update-in [:deck] f args))

(defn add-card! [c]
  (update-deck! conj c))

(defn hit []
    (update-deck! (fn [deck]
                     (util/hit :player1 deck))))
(defn reset []
  (update-deck! #(map util/reset-card %)))

(defn remove-card! [c]
  (update-deck! (fn [cs]
                  (vec (remove #(= % c) cs)))
                c))
;; -------------------------
;; Page components

(defn home-page []
  (fn []
    [:span.main
     [:h1 "The Blackjack Simulator"]
     [:div
      [:p "Try some things out"]]
     [:div {:class ["flex" "items-start"]}
      [:ul (map game/display-card (:deck @app-state))]
      [:div
       [:div {:class ["flex items-between"]}
          [:button {:on-click hit} "Hit"]
          (if (> (util/get-player-hand-val :player1 (:deck @app-state)) 21) [:button {:on-click reset}"Reset"])]
       [:h2 "Your Hand"]
       [:p "Your hand value: " (util/get-player-hand-val :player1 (:deck @app-state))]
       [:ul (map game/display-card (util/get-player-hand :player1 (:deck @app-state)))]]]]))



(defn items-page []
  (fn []
    [:span.main
     [:h1 "The items of bjclj"]
     [:ul (map (fn [item-id]
                 [:li {:name (str "item-" item-id) :key (str "item-" item-id)}
                  [:a {:href (path-for :item {:item-id item-id})} "Item: " item-id]])
               (range 1 60))]]))


(defn item-page []
  (fn []
    (let [routing-data (session/get :route)
          item (get-in routing-data [:route-params :item-id])]
      [:span.main
       [:h1 (str "Item " item " of bjclj")]
       [:p [:a {:href (path-for :items)} "Back to the list of items"]]])))


(defn about-page []
  (fn [] [:span.main
          [:h1 "About bjclj"]]))


;; -------------------------
;; Translate routes -> page components

(defn page-for [route]
  (case route
    :index #'home-page
    :about #'about-page
    :items #'items-page
    :item #'item-page))


;; -------------------------
;; Page mounting component

(defn current-page []
  (fn []
    (let [page (:current-page (session/get :route))]
      [:div
       [:header
        [:p [:a {:href (path-for :index)} "Home"] " | "
         [:a {:href (path-for :about)} "About bjclj"]]]
       [page]
       [:footer
        [:p "bjclj was generated by the "
         [:a {:href "https://github.com/reagent-project/reagent-template"} "Reagent Template"] "."]]])))

;; -------------------------
;; Initialize app

(defn mount-root []
  (rdom/render [current-page] (.getElementById js/document "app")))

(defn init! []
  (clerk/initialize!)
  (accountant/configure-navigation!
   {:nav-handler
    (fn [path]
      (let [match (reitit/match-by-path router path)
            current-page (:name (:data  match))
            route-params (:path-params match)]
        (reagent/after-render clerk/after-render!)
        (session/put! :route {:current-page (page-for current-page)
                              :route-params route-params})
        (clerk/navigate-page! path)))
        
    :path-exists?
    (fn [path]
      (boolean (reitit/match-by-path router path)))})
  (accountant/dispatch-current!)
  (mount-root))
